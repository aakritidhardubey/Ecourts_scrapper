# pdf_generator.py

import json
import re
from datetime import datetime
from reportlab.lib.pagesizes import A4, landscape
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.units import cm
from reportlab.pdfgen import canvas
import os

class NumberedCanvas(canvas.Canvas):
    """Custom canvas for adding page numbers and a footer."""
    def __init__(self, *args, **kwargs):
        canvas.Canvas.__init__(self, *args, **kwargs)
        self._saved_page_states = []

    def showPage(self):
        self._saved_page_states.append(dict(self.__dict__))
        self._startPage()

    def save(self):
        num_pages = len(self._saved_page_states)
        for state in self._saved_page_states:
            self.__dict__.update(state)
            self.draw_page_number(num_pages)
            canvas.Canvas.showPage(self)
        canvas.Canvas.save(self)

    def draw_page_number(self, page_count):
        self.setStrokeColorRGB(0, 0, 0)
        self.line(1*cm, 1.5*cm, self._pagesize[0] - 1*cm, 1.5*cm)
        self.setFont("Helvetica", 9)
        self.drawRightString(self._pagesize[0] - 1*cm, 1*cm, f"Page {self._pageNumber} of {page_count}")
        self.drawString(1*cm, 1*cm, "Generated by eCourts Scraper")


def convert_causelist_to_pdf(json_path):
    """Converts a complex JSON cause list to a professional, readable PDF report."""
    print(f"\nüìÑ Converting {os.path.basename(json_path)} to a professional PDF report...")
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            cases = json.load(f)
        
        if not cases:
            print("   ‚ö†Ô∏è No case data found. PDF generation skipped."); return

        pdf_path = json_path.replace('.json', '.pdf')
        
        # --- THE FIX: INTELLIGENT HEADER DETECTION ---
        # Find the item with the most keys to determine the full set of headers.
        header_item = max(cases, key=len, default={})
        headers = list(header_item.keys())
        if not headers:
            print("   ‚ö†Ô∏è JSON contains no data with headers. PDF generation skipped."); return
        
        pagesize = landscape(A4) if len(headers) > 5 else A4
        doc = SimpleDocTemplate(pdf_path, pagesize=pagesize, topMargin=2*cm, bottomMargin=2.5*cm, leftMargin=1*cm, rightMargin=1*cm)
        
        elements = []
        styles = getSampleStyleSheet()
        
        # --- PDF Header ---
        elements.append(Paragraph("Daily Cause List", styles['h1']))
        date_match = re.search(r'causelist_(\d{2}_\d{2}_\d{4})', json_path)
        if date_match:
            date_str = date_match.group(1).replace('_', '-')
            elements.append(Paragraph(f"Date: {date_str}", styles['h2']))
        elements.append(Paragraph(f"<b>Total Items Listed: {len(cases)}</b>", styles['Normal']))
        elements.append(Spacer(1, 0.5*cm))

        # --- THE FIX: DATA PRE-PROCESSING ---
        data = []
        table_styles = []

        # Styles for different row types
        header_style = ParagraphStyle(name='Header', parent=styles['Normal'], fontName='Helvetica-Bold', textColor=colors.whitesmoke, alignment=1)
        subheading_style = ParagraphStyle(name='Subheading', parent=styles['Normal'], fontName='Helvetica-Bold', alignment=1)
        cell_style = ParagraphStyle(name='Cell', parent=styles['Normal'], fontSize=8, leading=10)

        # Add the main headers first
        data.append([Paragraph(h, header_style) for h in headers])

        for i, case in enumerate(cases):
            # Check if it's a subheading row (e.g., "Misc. cases")
            if len(case) == 1 and case.get("Sr No") and not case.get("Sr No", "").isdigit():
                subheading_text = case["Sr No"]
                # Create a special row that will span all columns
                spanned_row = [Paragraph(subheading_text, subheading_style)] + [''] * (len(headers) - 1)
                data.append(spanned_row)
                # Add a style command for this specific row
                row_index = len(data) - 1
                table_styles.append(('SPAN', (0, row_index), (-1, row_index)))
                table_styles.append(('BACKGROUND', (0, row_index), (-1, row_index), colors.HexColor('#B0C4DE')))
            
            # Check if it's a full data row
            elif len(case) > 1:
                row = [Paragraph(str(case.get(h, '')), cell_style) for h in headers]
                data.append(row)
            
            # Ignore blank rows like {"Sr No": ""}

        # --- Table Creation and Styling ---
        table = Table(data, repeatRows=1)
        
        # Base styles
        base_style = [
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#002060')),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
            ('BOX', (0, 0), (-1, -1), 1.5, colors.black),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.HexColor('#EAEFF7'), colors.white]),
        ]
        
        # Combine base styles with our dynamic subheading styles
        table.setStyle(TableStyle(base_style + table_styles))
        
        elements.append(table)
        
        doc.build(elements, canvasmaker=NumberedCanvas)
        print(f"   ‚úÖ Professional PDF report saved successfully to: {pdf_path}")
        
    except Exception as e:
        import traceback
        print(f"   ‚ùå An error occurred during PDF generation: {e}")
        traceback.print_exc()